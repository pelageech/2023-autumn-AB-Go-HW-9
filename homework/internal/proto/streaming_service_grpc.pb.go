// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: streaming_service.proto

package filepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	ReadFile(ctx context.Context, opts ...grpc.CallOption) (FileService_ReadFileClient, error)
	Ls(ctx context.Context, opts ...grpc.CallOption) (FileService_LsClient, error)
	Meta(ctx context.Context, opts ...grpc.CallOption) (FileService_MetaClient, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) ReadFile(ctx context.Context, opts ...grpc.CallOption) (FileService_ReadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], "/file.FileService/ReadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceReadFileClient{stream}
	return x, nil
}

type FileService_ReadFileClient interface {
	Send(*ReadFileRequest) error
	Recv() (*ReadFileReply, error)
	grpc.ClientStream
}

type fileServiceReadFileClient struct {
	grpc.ClientStream
}

func (x *fileServiceReadFileClient) Send(m *ReadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceReadFileClient) Recv() (*ReadFileReply, error) {
	m := new(ReadFileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) Ls(ctx context.Context, opts ...grpc.CallOption) (FileService_LsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], "/file.FileService/Ls", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceLsClient{stream}
	return x, nil
}

type FileService_LsClient interface {
	Send(*LsRequest) error
	CloseAndRecv() (*LsReply, error)
	grpc.ClientStream
}

type fileServiceLsClient struct {
	grpc.ClientStream
}

func (x *fileServiceLsClient) Send(m *LsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceLsClient) CloseAndRecv() (*LsReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) Meta(ctx context.Context, opts ...grpc.CallOption) (FileService_MetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[2], "/file.FileService/Meta", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceMetaClient{stream}
	return x, nil
}

type FileService_MetaClient interface {
	Send(*MetaRequest) error
	CloseAndRecv() (*MetaReply, error)
	grpc.ClientStream
}

type fileServiceMetaClient struct {
	grpc.ClientStream
}

func (x *fileServiceMetaClient) Send(m *MetaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceMetaClient) CloseAndRecv() (*MetaReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MetaReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	ReadFile(FileService_ReadFileServer) error
	Ls(FileService_LsServer) error
	Meta(FileService_MetaServer) error
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) ReadFile(FileService_ReadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedFileServiceServer) Ls(FileService_LsServer) error {
	return status.Errorf(codes.Unimplemented, "method Ls not implemented")
}
func (UnimplementedFileServiceServer) Meta(FileService_MetaServer) error {
	return status.Errorf(codes.Unimplemented, "method Meta not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_ReadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).ReadFile(&fileServiceReadFileServer{stream})
}

type FileService_ReadFileServer interface {
	Send(*ReadFileReply) error
	Recv() (*ReadFileRequest, error)
	grpc.ServerStream
}

type fileServiceReadFileServer struct {
	grpc.ServerStream
}

func (x *fileServiceReadFileServer) Send(m *ReadFileReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceReadFileServer) Recv() (*ReadFileRequest, error) {
	m := new(ReadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_Ls_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).Ls(&fileServiceLsServer{stream})
}

type FileService_LsServer interface {
	SendAndClose(*LsReply) error
	Recv() (*LsRequest, error)
	grpc.ServerStream
}

type fileServiceLsServer struct {
	grpc.ServerStream
}

func (x *fileServiceLsServer) SendAndClose(m *LsReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceLsServer) Recv() (*LsRequest, error) {
	m := new(LsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_Meta_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).Meta(&fileServiceMetaServer{stream})
}

type FileService_MetaServer interface {
	SendAndClose(*MetaReply) error
	Recv() (*MetaRequest, error)
	grpc.ServerStream
}

type fileServiceMetaServer struct {
	grpc.ServerStream
}

func (x *fileServiceMetaServer) SendAndClose(m *MetaReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceMetaServer) Recv() (*MetaRequest, error) {
	m := new(MetaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadFile",
			Handler:       _FileService_ReadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Ls",
			Handler:       _FileService_Ls_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Meta",
			Handler:       _FileService_Meta_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "streaming_service.proto",
}
